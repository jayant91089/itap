#!##DisplayCode
#! @BeginExample
s:=[ [ [ 0*Z(2), 0*Z(2), Z(2)^0 ] ], [ [ 0*Z(2), Z(2)^0, 0*Z(2) ] ],\
[ [ 0*Z(2), Z(2)^0, Z(2)^0 ] ], [ [ Z(2)^0, 0*Z(2), 0*Z(2) ] ],\
[ [ Z(2)^0, 0*Z(2), Z(2)^0 ] ], [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ],\
[ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] ];;
map:=rec( 1 := 1, 2 := 2, 3 := 4, 4 := 3, 5 := 6, 6 := 5, 7 := 7 );;
DisplayCode([s,map]);;
#! 1->1
#!  . . 1
#! =============================
#! 2->2
#!  . 1 .
#! =============================
#! 3->4
#!  . 1 1
#! =============================
#! 4->3
#!  1 . .
#! =============================
#! 5->6
#!  1 . 1
#! =============================
#! 6->5
#! 1 1 .
#! =============================
#! 7->7
#!  1 1 1
#! =============================
#! @EndExample

#!##FanoNet
#! @BeginExample
FanoNet();
#! [ [ [ [ 1, 2 ], [ 1, 2, 4 ] ], [ [ 2, 3 ], [ 2, 3, 5 ] ],
#!      [ [ 4, 5 ], [ 4, 5, 6 ] ], [ [ 3, 4 ], [ 3, 4, 7 ] ],
#!      [ [ 1, 6 ], [ 3, 1, 6 ] ], [ [ 6, 7 ], [ 2, 6, 7 ] ],
#!      [ [ 5, 7 ], [ 1, 5, 7 ] ] ], 3, 7 ]
rlist:=proverate(FanoNet(),[1,1,1,1,1,1,1],GF(2),[]);;
rlist[1]; # Fano matroid is representable over GF(2)
#! true
DisplayCode(rlist[2]);
#! 1->1
#!  . . 1
#! =============================
#! 2->2
#!  . 1 .
#! =============================
#! 3->4
#!  . 1 1
#! =============================
#! 4->3
#!  1 . .
#! =============================
#! 5->6
#!  1 . 1
#! =============================
#! 6->5
#!  1 1 .
#! =============================
#! 7->7
#!  1 1 1
#! =============================
rlist:=proverate(FanoNet(),[1,1,1,1,1,1,1],GF(3),[]);;
rlist[1]; # Fano matroid is not representable over GF(3)
#! false
#! @EndExample

#!##NonFanoNet
#! @BeginExample
NonFanoNet();
gap> NonFanoNet();
#! [ [ [ [ 1, 2, 3 ], [ 1, 2, 3, 4 ] ], [ [ 1, 2 ], [ 1, 2, 5 ] ],
#!       [ [ 1, 3 ], [ 1, 3, 6 ] ], [ [ 2, 3 ], [ 2, 3, 7 ] ],
#!       [ [ 4, 5 ], [ 3, 4, 5 ] ], [ [ 4, 6 ], [ 2, 4, 6 ] ],
#!       [ [ 4, 7 ], [ 1, 4, 7 ] ] ], 3, 7 ]

#! @EndExample

#!##VamosNet
#! @BeginExample
VamosNet();
#! [ [ [ [ 1, 2, 3, 4 ], [ 1, 2, 3, 4, 5 ] ],
#!       [ [ 1, 2, 5 ], [ 1, 2, 5, 6 ] ],
#!       [ [ 2, 3, 6 ], [ 2, 3, 6, 7 ] ],
#!       [ [ 3, 4, 7 ], [ 3, 4, 7, 8 ] ],
#!       [ [ 4, 8 ], [ 2, 4, 8 ] ],
#!       [ [ 2, 3, 4, 8 ], [ 1, 2, 3, 4, 8 ] ],
#!       [ [ 1, 4, 5, 8 ], [ 1, 2, 3, 4, 5, 8 ] ],
#!       [ [ 1, 2, 3, 7 ], [ 1, 2, 3, 4, 7 ] ],
#!       [ [ 1, 5, 7 ], [ 1, 3, 5, 7 ] ] ], 3, 7 ]
#! @EndExample

#!##U2kNet
#! @BeginExample
U2kNet(4);
#![ [ [ [ 1, 2 ], [ 1, 2, 3 ] ], [ [ 1, 3 ], [ 1, 3, 4 ] ],
#!      [ [ 1, 4 ], [ 1, 2, 4 ] ], [ [ 2, 3 ], [ 1, 2, 3 ] ],
#!      [ [ 2, 4 ], [ 1, 2, 4 ] ], [ [ 3, 4 ], [ 1, 3, 4 ] ] ], 2, 4 ]
#! @EndExample

#!##ButterFlyNet
#! @BeginExample
ButterflyNet();
#! [ [ [ [ 1, 2 ], [ 1, 2, 3 ] ], [ [ 1, 3 ], [ 1, 2, 3 ] ],
#!      [ [ 2, 3 ], [ 1, 2, 3 ] ] ], 2, 3 ]
U2kNet(3)=ButterflyNet();
#! true
#! @EndExample

#!##Subspace5
#! @BeginExample
rays5:=Subspace5();;
Size(rays5);
#! 162
rlist:=proverep(rays5[46],5,GF(2),[])
rlist[1];
#! true
gap> DisplayCode(rlist[2]);
#! 1->4
#!  . . . 1
#! =============================
#! 2->5
#!  . . 1 .
#! =============================
#! 3->3
#!  . 1 . .
#! =============================
#! 4->2
#!  1 . . .
#!  . . 1 1
#! =============================
#! 5->1
#!  1 . . 1
#!  . 1 1 1
#! =============================
#! @EndExample


#!##BenaloahLeichter
#! @BeginExample
B:=BenaloahLeichter();
#! [ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ] ]
rlist:=provess(B,5,[2,2,3,3,2],GF(2),[]);;
rlist[1];
#! true
DisplayCode(rlist[2]);
#! 1->1
#!  . . . . 1 .
#! . . . . . 1
#! =============================
#! 2->2
#! . . 1 . . .
#! . . . 1 . .
#! =============================
#! 3->3
#! . 1 . . . .
#! . . 1 . . 1
#! . . . 1 1 .
#! =============================
#! 4->5
#! 1 . . . . .
#! . 1 . . . .
#! =============================
#! 5->4
#! 1 . . . . 1
#! . 1 . . 1 .
#! . . 1 . . .
#! =============================
#! @EndExample

#!##Threshold
#! @BeginExample
T:=Threshold(4,2);
#! [ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 2, 3 ], [ 2, 4 ], [ 3, 4 ] ]
rlist:=provess(T,5,[1,1,1,1,1],GF(2),[]);
#! [ false ]
rlist:=provess(T,5,[1,1,1,1,1],GF(3),[]);
#! [ false ]
rlist:=provess(T,5,[1,1,1,1,1],GF(5),[]);;
rlist[1];
#! true
gap> DisplayCode(rlist[2]);
#! 1->1
#!  . 1
#! =============================
#! 2->2
#!  1 .
#! =============================
#! 3->3
#!  1 1
#! =============================
#! 4->4
#!  1 2
#! =============================
#! 5->5
#! 1 4
#! =============================
#! @EndExample

#!##HyperedgeNet1
#! @BeginExample
N:=HyperedgeNet1();
#! [ [ [ [ 1, 2, 3 ], [ 1, 2, 3, 4 ] ], [ [ 1, 3, 4 ], [ 1, 3, 4, 5 ] ],
#!       [ [ 3, 4, 5 ], [ 3, 4, 5, 6 ] ], [ [ 4, 5 ], [ 1, 3, 4, 5 ] ],
#!       [ [ 4, 6 ], [ 2, 3, 4, 6 ] ], [ [ 5, 6 ], [ 2, 3, 5, 6 ] ] ], 3, 6 ]
rlist:=proveregion(N,2,GF(2),[4]);; # k=2,opt_dmax=4=max. code dimension
Size(rlist[1]); # number of distinct achievable rate vectors found
#! 122
rlist[1][78]; # an achievable rate vector
#! [ 2, 0, 1, 2, 1, 1 ]
lrs_path:="/home/aspitrg3-users/jayant/lrslib-061/";; # path to lrslib
rrcompute(rlist[1],N[2],N[3],lrs_path); # compute achievable rate region
#!
#! *redund:lrslib v.6.1 2015.11.20(lrsgmp.h gmp v.5.0)
#! *Copyright (C) 1995,2015, David Avis   avis@cs.mcgill.ca
#! *Input taken from file /tmp/tmxYdXYT/file1.ext
#! *Output sent to file /tmp/tmxYdXYT/file1red.ext
#!
#! *0.056u 0.004s 648Kb 0 flts 0 swaps 0 blks-in 8 blks-out
#!
#!
#! *lrs:lrslib v.6.1 2015.11.20(lrsgmp.h gmp v.5.0)
#! *Copyright (C) 1995,2015, David Avis   avis@cs.mcgill.ca
#! *Input taken from file /tmp/tmxYdXYT/file1red.ext
#! H-representation
#! begin
#! ***** 7 rational
#!  0  0  0  0  1  0  0
#!  0  1  0  0  0 -1  0
#!  0  0  0  0  0  1  0
#!  0  0  0  0  0  0  1
#!  0  0  0  1  0  0  0
#!  0  1  1  0 -1 -1 -1
#!  0  0  1  1  0 -1 -1
#!  0  0  1  0  0  0  0
#!  0  1  1  2 -1 -2 -2
#!  0  1  0  1  0 -1 -1
#! end
#! *Totals: facets=10 bases=22
#! *Dictionary Cache: max size= 6 misses= 0/21   Tree Depth= 5
#! *lrs:lrslib v.6.1 2015.11.20(32bit,lrsgmp.h)
#! *0.000u 0.000s 648Kb 0 flts 0 swaps 0 blks-in 0 blks-out
#! @EndExample

#!##HyperedgeNet2
#! @BeginExample
N:=HyperedgeNet2();
#! [ [ [ [ 1, 2, 3, 5 ], [ 1, 2, 3, 4, 5 ] ], [ [ 1, 3 ], [ 1, 3, 5 ] ],
#!      [ [ 3, 4, 5 ], [ 3, 4, 5, 6 ] ], [ [ 4, 5 ], [ 1, 3, 4, 5 ] ],
#!      [ [ 4, 6 ], [ 2, 3, 4, 6 ] ], [ [ 5, 6 ], [ 2, 3, 5, 6 ] ] ], 3, 6 ]
#! @EndExample
